version: '3.9'
services:
  app:
    container_name: golang_container
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - SERVER_IDLE_TIMEOUT=${SERVER_IDLE_TIMEOUT}
      - SERVER_READ_TIMEOUT=${SERVER_READ_TIMEOUT}
      - SERVER_WRITE_TIMEOUT=${SERVER_WRITE_TIMEOUT}
      - SERVER_SHUTDOWN_TIMEOUT=${SERVER_SHUTDOWN_TIMEOUT}
      - SERVER_MAX_UPLOAD_SIZE=${SERVER_MAX_UPLOAD_SIZE}
      - NODES_CACHE_FILENAME=${NODES_CACHE_FILENAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}

      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
      - TEST_POSTGRES_USER=${TEST_DB_USER}
      - TEST_POSTGRES_PASSWORD=${TEST_DB_PASS}
      - TEST_POSTGRES_DB=${TEST_DB_NAME}
      - TEST_DATABASE_HOST=${TEST_DB_HOST}
      - TEST_DATABASE_PORT=${TEST_DB_PORT}
    tty: true
    build: .
    ports:
      - 8080:8080
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - postgresdb
    networks:
      - learning

  postgresdb:
    image: postgres:latest
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
    ports:
      - '1234:5432'
    volumes:
      - ./db.sql:/docker-entrypoint-initdb.d/db.sql
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - learning

  postgresdb_test:
    image: postgres:latest
    container_name: postgres_test_container
    environment:
      - POSTGRES_USER=${TEST_DB_USER}
      - POSTGRES_PASSWORD=${TEST_DB_PASS}
      - POSTGRES_DB=${TEST_DB_NAME}
      - DATABASE_HOST=${TEST_DB_HOST}
    ports:
      - '4568:5432'
    volumes:
      - ./db.sql:/docker-entrypoint-initdb.d/db.sql
      - ./pg_data_test:/var/lib/postgresql/data
    networks:
      - learning

volumes:
  pg_data:
  pg_data_test:

# Networks to be created to facilitate communication between containers
networks:
  learning:
    driver: bridge